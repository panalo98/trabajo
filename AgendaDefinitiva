using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Text.RegularExpressions;
using System.IO;
using System.Threading;

namespace Agenda_CristhianFunez_Marc_Rodriguez
{
    class Program
    {
        static void Main(string[] args)
        {
            menu();

        }
        static void menu()
        {
            Console.Clear();
            int error = 0;
            string opcio, opcionsvalides;
            opcionsvalides = "123456Q";
            bool valid;
            Console.WriteLine("-----------------------");
            Console.WriteLine(" 1 - Donar d’alta usuari");
            Console.WriteLine(" 2 - Recuperar usuari ");
            Console.WriteLine(" 3 - Modificar usuari ");
            Console.WriteLine(" 4 - Eliminar usuari ");
            Console.WriteLine(" 5 - Mostrar agenda");
            Console.WriteLine(" 6 - Ordenar agenda");
            Console.WriteLine(" Q - sortir menú ");
            Console.WriteLine("-----------------------");

            do
            {
                valid = false;
                if (error == 0)
                {
                    Console.WriteLine("Introdueix el caracter corresponden a la opcio");
                }
                else
                {
                    Console.WriteLine("Torna a introduir el caracter corresponden a la opcio");
                }
                opcio = Console.ReadLine();
                error++;
                for (int i = 0; i < opcionsvalides.Length; i++)
                {
                    if (opcio[0] == opcionsvalides[i])
                    {
                        valid = true;
                    }
                }
            } while (opcio.Length != 1 || valid != true);

            if (opcio[0] == '1')
            {
                donardealta();
            }
            if (opcio[0] == '2')
            {
                recuperausuari();
            }
            if (opcio[0] == '3')
            {
                modificarusuaris();
            }
            if (opcio[0] == '4')
            {
                borrarusuari();
            }
            if (opcio[0] == '5')
            {
                mostranominumero();
            }
            if (opcio[0] == '6')
            {
                ordenalaagenda();
            }
            if (opcio[0] == 'Q')
            {
                Environment.Exit(0);
            }
        }

        static void ordenalaagenda()
        {
            int contadorpalabras, ordenados, correcto, segundocontador;
            correcto = 0;
            ordenados = 0;
            contadorpalabras = 0;
            string linia, seccion, subseccion, liniacorrecta, llistaordenada, texto, copialiniacorrecta, textofitxer;
            texto = @".\agenda.txt";
            textofitxer = File.ReadAllText(texto);
            llistaordenada = "";
            liniacorrecta = "";

            if (textofitxer.Contains("Nombre: "))
            {
                linia = metodomostranombresyrecuperarlo();
                for (int i = 0; i < linia.Length; i++)
                {
                    if (linia[i] == ',')
                    {
                        contadorpalabras++;
                    }
                }
                do
                {
                    seccion = linia.Substring(0, ((linia.IndexOf(',')) + 1));
                    linia = linia.Remove(0, ((linia.IndexOf(',')) + 1));
                    //Console.WriteLine("Palabra de la seccion " + seccion);
                    correcto = 0;
                    for (int x = 1; x <= palabrasenlalinia(linia); x++)
                    {
                        subseccion = linia.Substring(0, ((linia.IndexOf(',')) + 1));
                        if (seccion[0] < subseccion[0])
                        {
                            correcto++;
                        }
                        if (seccion[0] == subseccion[0])
                        {
                            int y = 1;
                            while (seccion[y] == subseccion[y])
                            {
                                y++;
                            }
                            if (seccion[y] < subseccion[y])
                            {
                                correcto++;
                            }
                        }
                        linia = linia.Remove(0, ((linia.IndexOf(',')) + 1));
                        linia = linia.Insert(linia.Length, subseccion);

                    }
                    //Console.WriteLine("linia despues del for " + linia);
                    //Console.WriteLine("numero de correctos " + correcto);
                    //Console.WriteLine("numero de correctos del metodo " + palabrasenlalinia(linia));
                    if (correcto == palabrasenlalinia(linia))
                    {
                        ordenados++;
                        liniacorrecta = liniacorrecta + seccion;
                    }
                    else
                    {
                        linia = linia.Insert(linia.Length, seccion);
                    }
                    //Console.WriteLine("linia correcta  " + liniacorrecta);
                    //Console.WriteLine("contador de palabras " + contadorpalabras);
                    //Console.WriteLine("ordenados " + ordenados);
                } while (ordenados != contadorpalabras);
                copialiniacorrecta = liniacorrecta;
                int posicion = 0;
                for (int i = 0; i < liniacorrecta.Length; i++)
                {
                    if (liniacorrecta[i] == ',')
                    {
                        seccion = liniacorrecta.Substring(posicion, (i - posicion));
                        posicion = (i + 1);
                        //Console.WriteLine("busca el usuari " + seccion);
                        //Console.WriteLine("linia correcta " + liniacorrecta);
                        llistaordenada = llistaordenada + (metodobuscaparagrafo(seccion) + '\r');
                    }
                }
                //Console.WriteLine(llistaordenada);
                File.WriteAllText(texto, llistaordenada);
                Console.WriteLine("agenda ordenada");
                tornamenu();
            }
            else
            {
                Console.WriteLine("No hi ha usuaris");
                tornamenu();
            }

        }
        static void borrarusuari()
        {
            int localizacionparrafo;
            string borrarusuari, texto, textofitxer, parrafo;
            texto = @".\agenda.txt";
            textofitxer = File.ReadAllText(texto);

            Console.WriteLine("Escriu un nom de usuari o escriu 'mostra usuaris' per mostra els usuaris disponibles, per eliminarlo");
            borrarusuari = Console.ReadLine();
            if (borrarusuari == "mostra usuaris")
            {
                mostranombres();
                Console.WriteLine("Escriu un nom de usuari per borralo");
                borrarusuari = Console.ReadLine();
            }
            if (metodoestaonoelusuarieneltext(borrarusuari))
            {
                parrafo = metodobuscaparagrafo(borrarusuari);
                localizacionparrafo = textofitxer.IndexOf(parrafo);
                textofitxer = textofitxer.Remove((localizacionparrafo), (parrafo.Length + 1));
                File.WriteAllText(texto, textofitxer);
                Console.WriteLine("--->Usuari Eliminat");
                tornamenu();
            }
            else
            {
                tornamenu();
            }
        }
        static void modificarusuaris()
        {
            int ubicacionparagrado, ubicaciolinia, numeroletras, x;
            string opcio, usuari, paragrafo, texto, textofitxer, opciodospuntos;

            texto = @".\agenda.txt";
            textofitxer = File.ReadAllText(texto);

            Console.WriteLine("Escriu un nom de usuari o escriu 'mostra usuaris' per mostra els usuaris disponibles");
            usuari = Console.ReadLine();
            if (usuari == "mostra usuaris")
            {
                mostranombres();
                Console.WriteLine("Escriu un nom de usuari per modificarlo");
                usuari = Console.ReadLine();
            }
            if (metodoestaonoelusuarieneltext(usuari))
            {
                do
                {
                    Console.Clear();

                    paragrafo = metodobuscaparagrafo(usuari);
                    ubicacionparagrado = textofitxer.IndexOf(paragrafo);

                    opcio = metodomodificarusuario(usuari);
                    opciodospuntos = metodoopciodospuntos(opcio);

                    ubicaciolinia = paragrafo.IndexOf(opciodospuntos);
                    x = ubicaciolinia;
                    numeroletras = 0;
                    do
                    {
                        x++;
                        numeroletras++;
                    } while (paragrafo[x] != '\r');

                    textofitxer = textofitxer.Remove(ubicacionparagrado, paragrafo.Length);
                    paragrafo = paragrafo.Remove(ubicaciolinia, numeroletras);
                    paragrafo = paragrafo.Insert(ubicaciolinia, opcio);
                    textofitxer = textofitxer.Insert(ubicacionparagrado, paragrafo);
                    File.WriteAllText(texto, textofitxer);
                    Console.WriteLine("---> " + opciodospuntos + " se ha cambiat");
                    Console.WriteLine("Escriu 'Q' per torna a modificar el usuari o qualsevol tecla per sorti");
                    if (opciodospuntos == "Nombre")
                    {
                        usuari = opcio.Substring((opciodospuntos.Length + 2), ((opcio.Length - opciodospuntos.Length) - 2));
                    }
                } while ((Console.ReadLine()) == "Q");
                menu();
            }
            else
            {
                Console.WriteLine("usuari desconegut");
                tornamenu();
            }
        }

        static void recuperausuari()
        {
            string palabrabuscada, textofitxer;
            string texto = @".\agenda.txt";
            textofitxer = File.ReadAllText(texto); //posa tot el text del fitxer en un string
            Console.WriteLine("Escriu un nom o escriu o escriu 'mostra usuaris' per mostra els usuaris disponibles");
            palabrabuscada = Console.ReadLine();
            if (palabrabuscada == "mostra usuaris")
            {
                mostranombres();
                Console.WriteLine("Escriu un nom de usuari");
                palabrabuscada = Console.ReadLine();

            }
            palabrabuscada = MajusculaPrimeraLletra(palabrabuscada);
            if (textofitxer.Contains("Nombre: " + palabrabuscada))
            {
                Console.WriteLine(metodobuscaparagrafo(palabrabuscada));
                Console.WriteLine("Espera 5 segons");
                Thread.Sleep(5000);
                //for (int i = 5; i >= 0; i--) //No me gusta
                //{
                //    Console.Clear();
                //    Console.WriteLine(metodobuscaparagrafo(palabrabuscada));
                //    Console.WriteLine("Espera " + i + " segons");
                //    Thread.Sleep(1000);
                //}

                menu();
            }
            else
            {
                Console.WriteLine("usuari desconegut");
                tornamenu();
            }

        }
        static void donardealta()
        {
            {
                //Fiquem el string perque elimini el que no sigui Lletres en nom i cognom i creem les variables per el nom i cognom
                string nom, cognom, dni, telefon, correu, data;
                int errors;
                errors = 0;
                bool validaciodni, validaciotelefon, validaciodata, validaciocorreu;
                DateTime datadatetime = DateTime.Now;
                //demanem el valor de nom i cognom, i li apliquem el regex per treure el que no sigui lletres 
                Console.WriteLine("Introdueix el teu nom");
                nom = Console.ReadLine();

                //metodo nombre
                nom = metodonombrecognom(nom);
                if (metodoestaonoelusuarieneltext(nom))
                {
                    Console.WriteLine("Aquet nom de usuari ya existeix");
                    Console.WriteLine("PD: si posas Exem:'user200' o 'user900' es llegirà con 'User'");
                    tornamenu();
                }

                //metodo cognom
                Console.WriteLine("Introdueix el teu cognom");
                cognom = Console.ReadLine();
                cognom = metodonombrecognom(cognom);

                //dni
                do
                {
                    if (errors == 0)
                    {
                        Console.WriteLine("Introdueix un DNI");
                    }
                    else
                    {
                        Console.WriteLine("DNI incorrecte torna a introduirlo");
                    }
                    dni = Console.ReadLine();
                    validaciodni = metododni(dni);
                    errors++;
                } while (validaciodni != true);
                //
                errors = 0;
                //telefon
                do
                {
                    if (errors == 0)
                    {
                        Console.WriteLine("Introdueix un telefon");
                    }
                    else
                    {
                        Console.WriteLine("telefon incorrecte torna a introduirlo");
                    }
                    telefon = Console.ReadLine();
                    validaciotelefon = metodovalidaciotelefon(telefon);
                    errors++;
                } while (validaciotelefon != true);

                errors = 0;

                // data naixament
                do
                {
                    if (errors == 0)
                    {
                        Console.WriteLine("introdueix data en format dd/mm/aaaa");
                    }
                    else
                    {
                        Console.WriteLine("data incorrecta torna a introduirla en format dd/mm/aaaa");
                    }
                    data = Console.ReadLine();
                    validaciodata = metodovalidaciodata(data);
                    errors++;
                } while (validaciodata != true);

                //correo
                errors = 0;
                do
                {
                    if (errors == 0)
                    {
                        Console.WriteLine("Introdueix un correo .es | .com");
                    }
                    else
                    {
                        Console.WriteLine("correu incorrecte torna a introduirlo .es | .com");
                    }
                    correu = Console.ReadLine();
                    validaciocorreu = metodovalidaciocorreu(correu);
                    errors++;
                } while (validaciocorreu != true);

                //afegeix

                string path = @".\agenda.txt";
                List<string> lineas = new List<string>();

                lineas.Add("-----");
                lineas.Add("Nombre: " + nom);
                lineas.Add("Cognom: " + cognom);
                lineas.Add("DNI: " + dni);
                lineas.Add("Telefon: " + telefon);
                lineas.Add("Data de naixement: " + data);
                lineas.Add("Correu: " + correu);
                lineas.Add("-----");

                File.AppendAllLines(path, lineas);
                Console.WriteLine("---> El usuari ha afegit");
                tornamenu();
            }
        }

        static string Nom(string nombre)
        {
            string nomerror = "[^a-zA-Z]";//Quita todo lo que no sean letras
            nombre = (Regex.Replace(nombre, nomerror, String.Empty));
            return nombre;
        }

        static string MajusculaPrimeraLletra(string nombre)
        {
            string primeralletra = " ";
            string segonapart = " ";
            try
            {
                nombre = nombre.ToLower();
                primeralletra = nombre.Substring(0, 1); //m
                primeralletra = primeralletra.ToUpper();//M
                segonapart = nombre.Substring(1); //arc
                nombre = primeralletra + segonapart;//Marc
            }
            catch { }

            return nombre;
        }

        static bool esnumero(char puedequenumero)
        {
            bool validacio;
            validacio = false;
            if (puedequenumero >= 48 && puedequenumero <= 57)
            {
                validacio = true;
                return validacio;
            }
            else
            {
                return validacio;
            }
        }

        static bool eslletra(char puedequelletra)
        {
            bool validacio;
            validacio = false;
            if (puedequelletra >= 65 && puedequelletra <= 90)
            {
                validacio = true;
                return validacio;
            }
            else
            {
                if (puedequelletra >= 97 && puedequelletra <= 122)
                {
                    validacio = true;
                    return validacio;
                }
                else
                {
                    return validacio;
                }
            }
        }

        static bool metodovalidaciocorreu(string correo)
        {
            bool validcorreo;
            validcorreo = false;
            string esocom;
            int arroba, punto, primeraserie, segundaseria, error;
            esocom = " ";
            error = 0;
            primeraserie = 0;
            segundaseria = 0;
            arroba = 0;
            punto = 0;
            for (int i = 0; i < correo.Length; i++)
            {
                if (correo[i] == '.')
                {
                    esocom = correo.Substring(i, (correo.Length - i));
                    punto++;
                }
                else
                {
                    if ((correo[i]) == '@')
                    {
                        arroba++;
                    }
                    else
                    {
                        if (eslletra(correo[i]))
                        {
                            if (arroba == 0)
                            {
                                primeraserie++;
                            }
                            if (arroba == 1)
                            {
                                segundaseria++;
                            }
                        }
                        else
                        {
                            if (esnumero(correo[i]))
                            {
                                if (arroba == 0)
                                {
                                    primeraserie++;
                                }
                                if (arroba == 1)
                                {
                                    segundaseria++;
                                }
                            }
                            else
                            {
                                error++;
                            }
                        }
                    }
                }
            }
            segundaseria = segundaseria - (esocom.Length - 1);
            if (arroba > 1)
            {
                error++;
                //Console.WriteLine("Error format incorrecte" + error);
            }
            if (primeraserie < 3)
            {
                error++;
                //Console.WriteLine("Error abans de l arroba " + error);
            }
            if (segundaseria < 3)
            {
                error++;
                //Console.WriteLine("Error despres de la arroba " + error);
            }

            if (esocom != ".com")
            {
                if (esocom != ".es")
                {
                    error++;
                    //Console.WriteLine("Error te que se .com o .es");
                }
            }
            if (punto > 1)
            {
                error++;
                //Console.WriteLine("Error massas punts");
            }
            if (error == 0)
            {
                validcorreo = true;
                return validcorreo;
            }
            else
            {
                return validcorreo;
            }
        }

        static void mostranombres()
        {
            int ubicacionpalabra, final;
            string opcion, textofitxer, textofitxerdisminuyendo;
            string path = @".\agenda.txt";
            textofitxer = File.ReadAllText(path); //posa tot el text del fitxer en un string
            opcion = "Nombre: "; //Nomes agafa els nombres
            textofitxerdisminuyendo = textofitxer;
            bool mostranoms; // comprovara si esta la opcio
            if (textofitxerdisminuyendo.Contains(opcion))
            {
                do
                {
                    final = 0;
                    for (int i = 0; i < textofitxerdisminuyendo.Length; i++)
                    {
                        ubicacionpalabra = textofitxerdisminuyendo.IndexOf(opcion);
                        if (i == ubicacionpalabra)
                        {
                            int primersalto = 0;
                            int numerolletres = 0;
                            for (int x = ubicacionpalabra; x < textofitxerdisminuyendo.Length; x++)
                            {
                                numerolletres++;
                                if (textofitxerdisminuyendo[x] == '\r' && primersalto == 0)
                                {
                                    primersalto++;
                                    Console.WriteLine("-- " + textofitxerdisminuyendo.Substring((ubicacionpalabra + opcion.Length), (numerolletres - opcion.Length)));
                                    final = ubicacionpalabra + numerolletres;
                                }
                            }
                        }
                    }
                    textofitxerdisminuyendo = textofitxerdisminuyendo.Substring(final, (textofitxerdisminuyendo.Length - final));
                    mostranoms = textofitxerdisminuyendo.Contains(opcion);
                } while (mostranoms != false);
            }
            else
            {
                Console.WriteLine("No hi ha usuaris");
            }
        }

        static string metodonombrecognom(string nom)
        {
            nom = Nom(nom);
            nom = MajusculaPrimeraLletra(nom);
            return nom;
        }

        static bool metododni(string dni)
        {
            int numerosvalidos, lletravalida;
            numerosvalidos = 0;
            lletravalida = 0;
            bool validaciodnii = false;
            if (dni.Length == 9)
            {
                for (int i = 0; i < 8; i++)
                {
                    if (esnumero(dni[i]))
                    {
                        numerosvalidos++;
                    }
                }
                if (eslletra(dni[8]))
                {
                    lletravalida = 1;
                }
                if (lletravalida == 1 && numerosvalidos == 8)
                {
                    validaciodnii = true;
                    return validaciodnii;
                }
                else
                {
                    return validaciodnii;
                }
            }
            else
            {
                return validaciodnii;
            }
        }

        static bool metodovalidaciotelefon(string telefon)
        {
            bool validaciotelefon = false;
            int numerosvalidos;
            numerosvalidos = 0;


            if (telefon.Length == 9)
            {
                for (int i = 0; i < telefon.Length; i++)
                {
                    if (esnumero(telefon[i]))
                    {
                        numerosvalidos++;
                    }
                }
                if (numerosvalidos == 9)
                {
                    validaciotelefon = true;
                    return validaciotelefon;
                }
                else
                {
                    return validaciotelefon;
                }
            }
            else
            {
                return validaciotelefon;
            }

        }
        static bool metodovalidaciodata(string data)
        {
            string datacomparativa;
            DateTime datadatetime = DateTime.Now;
            bool validaciondeladata = false;

            datacomparativa = String.Format("{0:00}/{1:00}/{2:0000}", datadatetime.Day, datadatetime.Month, datadatetime.Year, datadatetime.Hour, datadatetime.Minute, datadatetime.Second, datadatetime.Millisecond);

            try
            {
                datadatetime = Convert.ToDateTime(data);
                datacomparativa = String.Format("{0:00}/{1:00}/{2:0000}", datadatetime.Day, datadatetime.Month, datadatetime.Year, datadatetime.Hour, datadatetime.Minute, datadatetime.Second, datadatetime.Millisecond);
            }
            catch { }
            if (data == datacomparativa)
            {
                validaciondeladata = true;
                return validaciondeladata;
            }
            else
            {
                return validaciondeladata;
            }
        }

        static string metodobuscaparagrafo(string palabrabuscada)
        {
            int ubicacionpalabra, barritas, substringprincipio, substringfinal;
            substringprincipio = 0;
            substringfinal = 0;
            string textofitxer;
            string texto = @".\agenda.txt";
            textofitxer = File.ReadAllText(texto); //posa tot el text del fitxer en un string
            palabrabuscada = MajusculaPrimeraLletra(palabrabuscada);
            palabrabuscada = "Nombre: " + palabrabuscada + '\r';
            ubicacionpalabra = textofitxer.IndexOf(palabrabuscada); // identifica la posicio de la paraula
            barritas = 0;
            int x = ubicacionpalabra;
            do
            {
                x--;
                if (textofitxer[x] == '-')
                {
                    barritas++;
                }
            } while (barritas != 5);
            substringprincipio = x;
            barritas = 0;
            x = ubicacionpalabra;
            do
            {
                x++;
                if (textofitxer[x] == '-')
                {
                    barritas++;
                }
            } while (barritas != 5);
            substringfinal = (x - substringprincipio);

            textofitxer = textofitxer.Substring(substringprincipio, (substringfinal + 1)); //mostra el contingut que hi ha entre

            return textofitxer;
        }
        static bool metodoestaonoelusuarieneltext(string palabrabuscada)
        {
            bool verificacio = false;
            string texto, textofitxer;
            texto = @".\agenda.txt";
            textofitxer = File.ReadAllText(texto); //posa tot el text del fitxer en un string
            try
            {
                palabrabuscada = MajusculaPrimeraLletra(palabrabuscada);

            }
            catch { }
            if (textofitxer.Contains("Nombre: " + palabrabuscada + '\r'))
            {
                verificacio = true;
                return verificacio;
            }
            else
            {
                return verificacio;
            }
        }

        static void tornamenu()
        {
            string opcio;
            Console.WriteLine("Escriu 'Q' per sorti o qualsevol tecla per torna al menu");
            opcio = Console.ReadLine();
            if (opcio.Length == 1 && opcio[0] == 'Q')
            {
                Environment.Exit(0);
            }
            else
            {
                Console.Clear();
                menu();
            }
        }

        static string metodomodificarusuario(string nombreusuari)
        {
            bool verificacio, valid;
            valid = false;
            int error;
            error = 0;
            string opcio, opcionsvalides, opciostring, paragrafo;
            opciostring = " ";
            opcionsvalides = "123456";
            paragrafo = metodobuscaparagrafo(nombreusuari);
            Console.WriteLine("INTRODUEIX LA OPCIO QUE VOLS MODIFICAR DEL USUARI");
            //Console.WriteLine("-----------------------");
            //Console.WriteLine("1 - Nombre");
            //Console.WriteLine("2 - Cognom");
            //Console.WriteLine("3 - DNI");
            //Console.WriteLine("4 - Telefon");
            //Console.WriteLine("5 - Data de naixement");
            //Console.WriteLine("6 - Correu");
            //Console.WriteLine("-----------------------");
            int numeros = 1;
            int y = 0;
            do
            {
                if (paragrafo[y] == '\r')
                {


                    paragrafo = paragrafo.Insert((y + 2), (numeros + " - "));
                    numeros++;
                }
                y++;
            } while (numeros != 7);
            Console.WriteLine(paragrafo);
            do
            {
                do
                {
                    if (error == 0)
                    {
                        Console.WriteLine("Introdueix el numero corresponden a la opcio per modificar el usuari");
                    }
                    else
                    {
                        Console.WriteLine("Torna a introduir el numero corresponden a la opcio per modificar el usuari");
                    }
                    opcio = Console.ReadLine();
                    error++;
                } while (opcio.Length != 1);
                for (int i = 0; i < opcionsvalides.Length; i++)
                {
                    if (opcio[0] == opcionsvalides[i])
                    {
                        valid = true;
                    }
                }
            } while (valid != true);

            if (opcio[0] == '1') //nom
            {
                Console.WriteLine("Escriu el nou nom");
                opcio = "Nombre: ";
                opciostring = metodonombrecognom(Console.ReadLine());
                if (metodoestaonoelusuarieneltext(opciostring))
                {
                    Console.WriteLine("No es pot cambiar a aquet nombre de usuari, perque ya existeix");
                    Console.WriteLine("PD: si posas Exem:'user200' o 'user900' es llegirà con 'User'");
                    tornamenu();
                }

            }
            if (opcio[0] == '2') //cognom
            {
                Console.WriteLine("Escriu el nou cognom");
                opcio = "Cognom: ";
                opciostring = metodonombrecognom(Console.ReadLine());
            }
            if (opcio[0] == '3') //DNI
            {

                opcio = "DNI: ";
                do
                {
                    Console.WriteLine("Escriu el nou dni");
                    opciostring = Console.ReadLine();
                    verificacio = metododni(opciostring);
                } while (verificacio != true);
            }
            if (opcio[0] == '4') //telefon
            {

                opcio = "Telefon: ";
                do
                {
                    Console.WriteLine("Escriu el nou telefon");
                    opciostring = Console.ReadLine();
                    verificacio = metodovalidaciotelefon(opciostring);
                } while (verificacio != true);
            }
            if (opcio[0] == '5') //data naixament
            {

                opcio = "Data de naixement: ";
                do
                {
                    Console.WriteLine("Escriu el nou data de naixement en format dd/mm/aaaa");
                    opciostring = Console.ReadLine();
                    verificacio = metodovalidaciodata(opciostring);
                } while (verificacio != true);
            }
            if (opcio[0] == '6') //correu
            {
                opcio = "Correu: ";
                do
                {
                    Console.WriteLine("Escriu el nou correu .es | .com");
                    opciostring = Console.ReadLine();
                    verificacio = metodovalidaciocorreu(opciostring);
                } while (verificacio != true);
            }
            opcio = opcio + opciostring;
            return opcio;
        }

        static string metodoopciodospuntos(string opcio)
        {
            int x = 0;
            do
            {
                x++;
            } while (opcio[x] != ':');
            opcio = opcio.Substring(0, x);
            return opcio;
        }

        static string metodomostranombresyrecuperarlo()
        {
            int ubicacionpalabra, final;
            string opcion, textofitxer, textofitxerdisminuyendo;
            string linia = "";
            string seccion;
            string path = @".\agenda.txt";
            textofitxer = File.ReadAllText(path); //posa tot el text del fitxer en un string
            opcion = "Nombre: "; //Nomes agafa els nombres
            textofitxerdisminuyendo = textofitxer;
            bool mostranoms; // comprovara si esta la opcio
            do
            {
                final = 0;
                for (int i = 0; i < textofitxerdisminuyendo.Length; i++)
                {
                    ubicacionpalabra = textofitxerdisminuyendo.IndexOf(opcion);
                    if (i == ubicacionpalabra)
                    {
                        int primersalto = 0;
                        int numerolletres = 0;
                        for (int x = ubicacionpalabra; x < textofitxerdisminuyendo.Length; x++)
                        {
                            numerolletres++;
                            if (textofitxerdisminuyendo[x] == '\r' && primersalto == 0)
                            {
                                primersalto++;
                                seccion = textofitxerdisminuyendo.Substring((ubicacionpalabra + opcion.Length), (numerolletres - (opcion.Length + 1)));

                                final = ubicacionpalabra + numerolletres;
                                linia = linia.Insert(0, (seccion + ","));
                            }
                        }
                    }
                }
                textofitxerdisminuyendo = textofitxerdisminuyendo.Substring(final, (textofitxerdisminuyendo.Length - final));
                mostranoms = textofitxerdisminuyendo.Contains(opcion);
            } while (mostranoms != false);
            return linia;
        }

        static int palabrasenlalinia(string linia)
        {
            int contador;
            contador = 0;
            for (int i = 0; i < linia.Length; i++)
            {
                if (linia[i] == ',')
                {
                    contador++;
                }
            }
            return contador;
        }
        static void mostranominumero()
        {
            int xi = 0;
            while (xi == 1)
            { 
            int contadorpalabras, ordenados, correcto, segundocontador;
            correcto = 0;
            ordenados = 0;
            contadorpalabras = 0;
            string linia, seccion, subseccion, liniacorrecta, llistaordenada, texto, copialiniacorrecta, dadesfitxer;
            texto = @".\agenda.txt";
                dadesfitxer = File.ReadAllText(texto);
            llistaordenada = "";
            liniacorrecta = "";

            if (dadesfitxer.Contains("Nombre: "))
            {
                linia = metodomostranombresyrecuperarlo();
                for (int i = 0; i < linia.Length; i++)
                {
                    if (linia[i] == ',')
                    {
                        contadorpalabras++;
                    }
                }
                do
                {
                    seccion = linia.Substring(0, ((linia.IndexOf(',')) + 1));
                    linia = linia.Remove(0, ((linia.IndexOf(',')) + 1));
                    //Console.WriteLine("Palabra de la seccion " + seccion);
                    correcto = 0;
                    for (int x = 1; x <= palabrasenlalinia(linia); x++)
                    {
                        subseccion = linia.Substring(0, ((linia.IndexOf(',')) + 1));
                        if (seccion[0] < subseccion[0])
                        {
                            correcto++;
                        }
                        if (seccion[0] == subseccion[0])
                        {
                            int y = 1;
                            while (seccion[y] == subseccion[y])
                            {
                                y++;
                            }
                            if (seccion[y] < subseccion[y])
                            {
                                correcto++;
                            }
                        }
                        linia = linia.Remove(0, ((linia.IndexOf(',')) + 1));
                        linia = linia.Insert(linia.Length, subseccion);

                    }
                    //Console.WriteLine("linia despues del for " + linia);
                    //Console.WriteLine("numero de correctos " + correcto);
                    //Console.WriteLine("numero de correctos del metodo " + palabrasenlalinia(linia));
                    if (correcto == palabrasenlalinia(linia))
                    {
                        ordenados++;
                        liniacorrecta = liniacorrecta + seccion;
                    }
                    else
                    {
                        linia = linia.Insert(linia.Length, seccion);
                    }
                    //Console.WriteLine("linia correcta  " + liniacorrecta);
                    //Console.WriteLine("contador de palabras " + contadorpalabras);
                    //Console.WriteLine("ordenados " + ordenados);
                } while (ordenados != contadorpalabras);
                copialiniacorrecta = liniacorrecta;
                int posicion = 0;
                for (int i = 0; i < liniacorrecta.Length; i++)
                {
                    if (liniacorrecta[i] == ',')
                    {
                        seccion = liniacorrecta.Substring(posicion, (i - posicion));
                        posicion = (i + 1);
                        //Console.WriteLine("busca el usuari " + seccion);
                        //Console.WriteLine("linia correcta " + liniacorrecta);
                        llistaordenada = llistaordenada + (metodobuscaparagrafo(seccion) + '\r');
                    }
                }
                //Console.WriteLine(llistaordenada);
                File.WriteAllText(texto, llistaordenada);
                    xi++;
                }
            else
            {
                    xi++;

            }
            }
            int ubicacionpalabra, final, ubicacionnumero;
            string opcionnom, textofitxer, textofitxerdisminuyendo, opciontelefon;
            string path = @".\agenda.txt";
            textofitxer = File.ReadAllText(path); // pone todo el texto en un string simple
            opcionnom = "Nombre: ";// cogera los apartados que empiecen con la palabra "Nombre: "
            opciontelefon = "Telefon: ";// cogera los apartados que empiecen con la palabra "Telefon: "
            textofitxerdisminuyendo = textofitxer; // otro string igual a textofitxer
            bool mostranoms; // sirve mas adelante, si hay nombres en el texto
            if (textofitxerdisminuyendo.Contains(opcionnom)) // si hay nombres en el texto, entra
            {
                do
                {
                    final = 0;


                    for (int i = 0; i < textofitxerdisminuyendo.Length; i++) //recorre todo el texto, letra a letra
                    {
                        ubicacionpalabra = textofitxerdisminuyendo.IndexOf(opcionnom); // con el indexof, da un int con la ubicacion
                        ubicacionnumero = textofitxerdisminuyendo.IndexOf(opciontelefon);
                        //desde donde empieza la palabra "Nombre: "
                        if (i == ubicacionpalabra) // una vez el recorrido(int) coincide desde donde empieza "Nombre: "
                                                   //la idea es pillar la ubicacion donde esta el proximo salto de linia "\r"
                        {
                            int primersalto = 0;// cuenta los saltos de linia
                            int numerolletres = 0; //contara el numero de letras hasta el primer salto de linia, que es donde acaba
                            for (int x = ubicacionpalabra; x < textofitxerdisminuyendo.Length; x++)  // principal, pero empezando desde la ubicacion de la letra donde empieza "Nombre: "
                            {
                                numerolletres++;//cuenta las letras
                                if (textofitxerdisminuyendo[x] == '\r' && primersalto == 0)//aqui solo entrara una vez
                                                                                           //cuando se encuentre el primer salto de linia, porque ya los siguientes no nos intersan
                                {
                                    primersalto++;// con esto anulo que entre mas veces a este if

                                    string nomtemporal = " ";

                                    nomtemporal = (textofitxerdisminuyendo.Substring((ubicacionpalabra + opcionnom.Length), (numerolletres - opcionnom.Length)));
                                    Console.WriteLine("Nom: " + nomtemporal);
                                    final = ubicacionpalabra + numerolletres; //esto es muy importante,coge la ubicacion donde

                                }

                            }
                        }



                        if (i == ubicacionnumero) // una vez el recorrido(int) coincide desde donde empieza "Nombre: "
                                                  //la idea es pillar la ubicacion donde esta el proximo salto de linia "\r"
                        {
                            int primersalto = 0;// cuenta los saltos de linia
                            int numerolletres = 0; //contara el numero de letras hasta el primer salto de linia, que es donde acaba
                            for (int x = ubicacionnumero; x < textofitxerdisminuyendo.Length; x++) //otro recorrido del texto
                                                                                                   // principal, pero empezando desde la ubicacion de la letra donde empieza "Nombre: "
                            {
                                numerolletres++;//cuenta las letras
                                if (textofitxerdisminuyendo[x] == '\r' && primersalto == 0)//aqui solo entrara una vez
                                                                                           //cuando se encuentre el primer salto de linia, porque ya los siguientes no nos intersan
                                {
                                    primersalto++;// con esto anulo que entre mas veces a este if
                                    string numerotemporal = " ";
                                    numerotemporal = ("Telefon: " + textofitxerdisminuyendo.Substring((ubicacionnumero + opciontelefon.Length), (numerolletres - opciontelefon.Length)));
                                    //Console.WriteLine("Telefon: " + textofitxerdisminuyendo.Substring((ubicacionnumero + opciontelefon.Length), (numerolletres - opciontelefon.Length)));
                                    Console.WriteLine(numerotemporal);
                                    //hace un substring desde donde empieza "Nombre: " hasta el salto de linia y lo muestra
                                    final = ubicacionnumero + numerolletres; //esto es muy importante,coge la ubicacion donde

                                }
                            }
                        }

                    }
                    textofitxerdisminuyendo = textofitxerdisminuyendo.Substring(final, (textofitxerdisminuyendo.Length - final));
                    mostranoms = textofitxerdisminuyendo.Contains(opcionnom);




                } while (mostranoms != false);
                tornamenu();
            }
            else
            {
                Console.WriteLine("No hi ha usuaris");
                tornamenu();
            }
        }


    }
}
